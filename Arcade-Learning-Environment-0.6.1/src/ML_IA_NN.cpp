#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <SDL/SDL.h>
#include "ale_interface.hpp"
#include "common/Constants.h"

#include "../include/neural_network.h"
#include "../include/activation_functions/relu.h"
#include "../include/activation_functions/softmax.h"
#include "../include/weights_initialization/kaiming.h"
#include "../include/ML_IA_NN.h"

const unsigned s_kinputs = s_N_EstadosJuego;
const unsigned s_numActions = 6;

NeuralNetwork crearRedDesdePesos() {
    auto initializer = std::make_unique<Kaiming>();

    std::vector<std::vector<std::vector<float>>> pesos_por_capa = {
  {
    {0.0379521, 0.0188862, -0.0530483, -0.071005, -0.0263708, -0.100786, -0.07561, -0.150006, 0.142942, -0.196786, 0.0382521, -0.0464631, 0.0985301, -0.0528237, -0.268987, -0.121006, -0.0509268, 0.201788, -0.0766693, -0.200105, -0.090159, 0.0479786, -0.00135395, -0.0946973, 0.0495551, 0.0175827, -0.149367, -0.289024, -0.250407, 0.193824, 0.0727685, -0.0840677, 0.0786288, 0.111299, -0.0778083, -0.0370693, 0.0212054, 0.241499, 0.0444162, 0.0984919, 0.0254884, -0.106254, 0.226772, -0.100331, -0.0105307, 0.0648371, -0.172029, 0.0192056, -0.192567, 0.0636135, -0.141517, -0.0577015, 0.12886, 0.0851476, -0.0441031, 0.146836, 0.084769, 0.168314, -0.105891, 0.118371, -0.0576838, -0.21632, -0.105226, 0.0840104, -0.200953, -0.330985, 0.0594397, -0.0493678, -0.0914494, -0.0673698, -0.029762, -0.16568, 0.0495436, 0.0302443, -0.158694, -0.155345, 0.29953, -0.121799, -0.0538472, -0.089807, 0.239337, 0.123071, -0.280791, 0.0564595, -0.15691, 0.0678696, -0.0171087, -0.128104, 0.0546515, -0.0144684, -0.0586945, 0.241649, 0.0793201, -0.291286, -0.110367, -0.00481738, -0.144949, 0.0393321, 0.149307, -0.0014839, 0.097498, 0.0162806, -0.00183531, 0.103087, -0.0643428, -0.148861, -0.148145, 0.148893, 0.0559143, -0.289457, 0.0574169, -0.127432, -0.0341276, 0.0770039, 0.0216598, -0.237509, 0.0888944, 0.163655, -0.078698, 0.0475951, -0.00485396, 0.0883688, 0.101971, 0.153645, -0.094076, 0.146765, 0.143445, -0.11959, -0.110093},
    {-0.16319, -0.032869, 0.0802475, 0.00890109, -0.0799263, -0.345673, -0.264741, -0.0980343, -0.162551, -0.0717084, 0.0682429, -0.160767, -0.168284, 0.0533364, -0.0228939, -0.244727, 0.0571307, -0.193905, 0.0746575, -0.00758547, 0.212473, 0.0312437, 0.0206045, -0.16188, 0.309697, 0.0371921, 0.0732072, -0.106117, -0.0889827, 0.125186, 0.018652, 0.144755, -0.323621, -0.0201286, -0.0398544, 0.0431705, -0.237161, 0.00574336, -0.0202348, -0.0376753, -0.126028, -0.0176552, -0.00394653, -0.133335, 0.162686, 0.229258, -0.077791, -0.0873158, -0.017227, -0.0585238, 0.0239492, -0.182593, -0.128436, -0.05857, -0.282886, -0.0662388, -0.0175576, -0.176776, 0.172366, 0.156028, 0.177551, -0.0105202, 0.244411, 0.00872931, 0.173284, -0.189183, -0.13174, 0.0264583, -0.0378696, -0.0512251, 0.0602816, 0.0256428, -0.0221356, 0.0666941, -0.191422, -0.0349941, -0.19517, -0.215116, -0.250914, 0.0463727, 0.106003, -0.0489098, -0.322353, -0.119346, -0.0480633, 0.16706, -0.242297, 0.0222093, 0.155058, 0.0229509, 0.0721138, -0.0579706, -0.00479287, 0.156379, -0.202714, -0.0673145, -0.082739, -0.203392, -0.0372707, 0.0521909, 0.0440882, 0.10856, 0.168568, 0.0879719, -0.0528568, 0.188951, -0.153284, -0.213725, -0.286393, 0.033013, 0.15745, -0.0869044, 0.110302, -0.347097, 0.051122, -0.000150124, 0.0716997, -0.238877, 0.0607705, -0.198261, -0.227311, -0.197323, 0.105555, -0.0881637, -0.0727344, 0.0676003, -0.109594, -0.196291, 0.117737},
    {-0.0950095, 0.0105912, 0.101497, 0.062146, -0.0838615, -0.0459969, 0.313412, 0.0540751, -0.0409424, 0.0821273, -0.110027, -0.114007, 0.19016, -0.0864666, -0.283281, -0.253534, -0.164025, 0.0397658, -0.138268, -0.195983, -0.0470082, 0.210422, 0.0917087, -0.0228529, 0.0141976, -0.00489878, -0.0760263, -0.188095, 0.166166, -0.281115, -0.123478, -0.139024, 0.0939477, 0.211487, -0.21193, -0.0581937, -0.0207857, -0.15031, 0.191708, 0.0258159, 0.0725484, 0.0634728, -0.136621, -0.107906, 0.0379843, -0.028068, 0.187615, -0.0962392, -0.16596, 0.10899, -0.0630244, 0.135106, -0.146749, -0.237937, -0.0265386, -0.104336, 0.140193, 0.0714466, 0.216954, 0.0537488, -0.0220532, -0.00578301, -0.121925, -0.134022, 0.155349, -0.260625, 0.197758, -0.0330537, 0.0791892, -0.20531, -0.152364, -0.109696, 0.23748, -0.0709874, 0.0123167, 0.0722641, 0.074164, -0.0445495, 0.0524818, -0.0841071, -0.166067, -0.206821, -0.172661, -0.023312, 0.0561728, -0.116354, 0.110204, -0.00431877, 0.01971, -0.0704489, -0.361477, -0.108666, -0.187415, -0.171736, -0.0109704, 0.224228, -0.0644683, 0.19585, 0.091322, 0.0655877, -0.151584, 0.134449, 0.110923, -0.0571296, -0.0537509, 0.251215, -0.0101155, -0.255563, 0.104326, 0.0342028, 0.0314826, -0.254955, -0.143772, -0.0222092, -0.0942952, -0.0460608, 0.0893345, -0.0756041, -0.0223119, 0.243373, -0.0582384, 0.00557998, -0.0655853, 0.222446, 0.104407, -0.0167178, -0.173077, 0.0265654, -0.0276585},
    {-0.159095, 0.0229584, 0.0966916, 0.190496, 0.100092, 0.202867, -0.058535, -0.0463516, 0.0503856, -0.0308701, 0.247596, -0.121427, 0.0401181, -0.167619, -0.0447628, 0.117315, 0.00554225, 0.0257282, -0.0451802, -0.140323, 0.155641, 0.0485631, -0.182053, -0.0884272, 0.0159591, -0.0505496, -0.0429652, -0.00570397, -0.0198635, 0.135614, -0.0282509, -0.157428, -0.148579, 0.0461785, 0.0202089, -0.018339, 0.0890882, 0.0605232, 0.0912793, -0.0196569, 0.135961, 0.0102469, -0.213297, 0.0193606, -0.0573579, -0.0722747, -0.180948, 0.0283199, -0.166403, 0.012719, -0.176542, 0.132116, -0.179537, -0.068293, -0.155206, 0.186556, 0.206141, -0.160203, -0.161278, 0.0721565, -0.0656002, 0.0485588, 0.0375677, -0.156632, -0.186566, -0.156502, -0.412404, 0.0323927, -0.131411, 0.173685, -0.0386033, -0.022812, -0.201408, 0.0446202, -0.0604375, 0.0166827, -0.159902, -0.0831126, 0.141991, 0.0628228, -0.0339761, -0.0280443, -0.101293, -0.000526617, 0.0698983, -0.119601, -0.226579, -0.0838063, 0.211793, -0.0889469, -0.0326248, 0.09192, 0.104626, -0.0246127, -0.137829, -0.188291, 0.143741, 0.0299067, 0.0596679, 0.0882959, 0.0530226, 0.0961997, 0.211456, 0.119366, -0.0652495, 0.0139378, -0.0447027, -0.0281098, -0.107817, 0.0887485, -0.118087, 0.00435387, -0.0806937, 0.0191783, -0.154462, 0.018361, 0.0311899, -0.125886, 0.0655605, 0.0166775, -0.171568, -0.175585, 0.00363567, -0.079392, -0.0412591, -0.0834176, 0.114313, 0.0631436, 0.0973184},
    {0.0123793, 0.0136321, -0.0695359, -0.149663, -0.1126, -0.00313865, -0.182115, 0.200269, -0.0879769, 0.136749, -0.265064, 0.341874, 0.0574289, -0.0654202, 0.0187912, -0.0790479, 0.0885986, 0.0746621, -0.194024, -0.0489575, 0.035071, -0.0844054, -0.106981, -0.0834244, -0.150769, -0.0300531, 0.0856164, -0.0462264, 0.0516494, 0.270822, -0.0341849, 0.334499, 0.188964, 0.0817863, -0.0651166, -0.0335914, 0.0885853, -0.066431, 0.11887, -0.0614628, 0.00843151, 0.0596285, -0.0164114, -0.0576752, 0.0796751, -0.127299, 0.103607, 0.0602991, 0.0500502, 0.148373, -0.003928, -0.0433946, -0.233369, 0.138077, 0.166391, 0.00574502, 0.0620073, 0.0252493, 0.109542, -0.125198, 0.0740517, 0.133016, -0.0475263, 0.0419724, 0.0246757, 0.0531408, 0.308159, -0.125287, -0.151461, -0.0509509, -0.0746509, 0.126397, 0.271719, 0.114245, -0.0975514, 0.0663775, -0.142556, -0.024666, -0.0477491, -0.0724856, -0.0211161, -0.134756, -0.178327, 0.0730613, -0.25533, 0.128167, -0.166508, 0.191218, -0.0783391, 0.115775, 0.0299054, 0.0479957, 0.0390982, -0.0702714, -0.136012, -0.237744, 0.00129595, -0.0647587, -0.181334, 0.0273761, -0.0582518, 0.0488978, 0.0520354, -0.0476451, 0.166461, -0.167339, -0.0885004, -0.0483686, -0.0845868, 0.0611764, -0.168807, -0.138222, 0.0387675, 0.0155959, -0.213553, -0.00491008, 0.115574, 0.0247499, 0.0105318, -0.0131335, -0.170264, -0.166855, -0.023388, -0.123289, 0.175275, -0.0882046, -0.29329, 0.0177453, -0.129912},
    {-0.137038, -0.0802747, -0.0150043, -0.0529409, -0.109644, 0.0254537, 0.256793, 0.0809293, 0.0650964, -0.337748, -0.0865704, -0.310429, 0.0776769, 0.00719943, 0.107093, -0.0820872, -0.122628, 0.119487, -0.245396, -0.0426737, -0.211477, -0.017327, 0.157508, 0.0451465, -0.107612, 0.149958, 0.216063, -0.105752, 0.027537, -0.0138853, -0.0242544, 0.154854, 0.0149371, -0.0491301, -0.0953195, 0.0500649, -0.0727493, 0.136001, 0.0876685, 0.153906, -0.0858562, 0.213203, 0.287215, 0.127565, -0.173064, -0.0583987, 0.0713052, -0.0629966, -0.104016, 0.163697, -0.0667271, 0.0035669, 0.093621, -0.0860137, 0.140873, 0.105534, 0.136105, 0.0733651, 0.11014, 0.0665579, 0.132378, -0.0614537, -0.160983, -0.13541, 0.164398, -0.117288, -0.0934561, 0.138974, -0.0424533, 0.190485, 0.147551, -0.132825, 0.066349, -0.0166299, 0.116953, -0.149204, -0.158406, -0.00522894, -0.0527064, -0.0838859, -0.140352, -0.0693958, -0.0406759, 0.031912, -0.0426781, 0.167284, 0.0045675, -0.239317, -0.0681538, -0.0453302, 0.151354, -0.0185683, 0.108979, -0.207144, -0.153761, 0.0916841, -0.0935627, -0.166944, 0.0475493, -0.251555, -0.00119444, 0.135133, 0.0976621, 0.254099, -0.0659643, 0.112877, -0.117519, -0.167199, -0.213727, 0.225327, -0.207329, -0.0217971, 0.0138194, -0.017133, -0.081597, 0.157931, 0.0633498, 0.237347, -0.0141114, -0.141049, -0.166126, 0.190273, -0.11924, -0.097745, -0.08529, -0.124999, -0.183577, -0.287541, 0.026217},
  },
  {
    {0.797223, 0.61739, 0.219167, -0.0259464, -0.199564, 1.00572, -0.978442},
    {0.569879, 0.549185, 0.770044, 0.0769377, -0.246571, -0.848708, 0.86474},
    {-1.1993, 2.45355, -0.142209, -0.00134243, -0.231162, -0.460587, 0.227348},
    {0.592763, 0.58077, -0.0025992, -0.23744, -0.503481, 1.17814, 0.399375},
    {-1.19431, -0.0959283, 0.19557, 0.10257, -0.526202, -0.106349, -0.89244},
    {-1.0861, -0.682424, 0.33413, 0.196411, -0.219867, -0.125831, 1.00464},
  }
};


    std::vector<Layer> capas;

    // Capa oculta
    {
        size_t input_size = s_kinputs;
        size_t output_size = pesos_por_capa[0].size();
        auto relu = std::make_unique<ReLU>();

        Layer capa(input_size, output_size, std::move(relu), initializer->clone());
        for (size_t j = 0; j < output_size; ++j)
            capa.getNeurons()[j].getWeights() = pesos_por_capa[0][j];

        capas.push_back(std::move(capa));
    }

    // Capa de salida
    {
        size_t input_size = pesos_por_capa[1][0].size() - 1;
        size_t output_size = pesos_por_capa[1].size();
        auto softmax = std::make_unique<Softmax>();

        Layer capa(input_size, output_size, std::move(softmax), initializer->clone());
        for (size_t j = 0; j < output_size; ++j)
            capa.getNeurons()[j].getWeights() = pesos_por_capa[1][j];

        capas.push_back(std::move(capa));
    }

    return NeuralNetwork(capas);
}

Action Inteligencia(const std::vector<float>& estado, NeuralNetwork& nn) {
    std::vector<float> salida = nn.feedForward(estado);
    int accion = std::distance(salida.begin(), std::max_element(salida.begin(), salida.end()));

    switch (accion) {
        case 0: return PLAYER_A_LEFT;
        case 1: return PLAYER_A_RIGHT;
        case 2: return PLAYER_A_FIRE;
        case 3: return PLAYER_A_RIGHTFIRE;
        case 4: return PLAYER_A_LEFTFIRE;
        case 5: return PLAYER_A_NOOP;
        default: return PLAYER_A_NOOP;
    }
}

reward_t agentStep(ALEInterface& alei, NeuralNetwork& nn) {
    static int32_t lives = alei.lives();
    reward_t reward = 0;

    if (alei.lives() < lives) {
        lives = alei.lives();
        alei.act(PLAYER_A_FIRE);
    }

    const ALERAM& ram = alei.getRAM();
    std::vector<float> estado;
    estado.reserve(s_kinputs);

    for (unsigned i = 0; i < s_kinputs; ++i) {
        estado.push_back(static_cast<float>(ram.get(vEstadoJuego[i])));
    }

    Action act = Inteligencia(estado, nn);
    reward = alei.act(act);

    return reward;
}

void usage(const char* pname) {
    std::cerr << "USAGE:\n  " << pname << " <romfile>\n";
    std::exit(1);
}

int main(int argc, char** argv) {
    if (argc != 2) usage(argv[0]);

    ALEInterface alei;
    alei.setInt("random_seed", 0);
    alei.setFloat("repeat_action_probability", 0);
    alei.setBool("display_screen", true);
    alei.setBool("sound", true);
    alei.loadROM(argv[1]);

    NeuralNetwork nn = crearRedDesdePesos();
    std::srand(static_cast<unsigned>(std::time(nullptr)));

    alei.act(PLAYER_A_FIRE);

    reward_t totalReward = 0;
    while (!alei.game_over()) {
        totalReward += agentStep(alei, nn);
    }

    std::cout << "Total Reward: " << totalReward << "\n";
    return 0;
}